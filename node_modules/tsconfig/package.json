{
  "name": "tsconfig",
  "version": "0.0.2",
  "description": "TypeScript project file specification + implementation",
  "main": "dist/lib/index.js",
  "typescript": {
    "definition": "dist/lib/tsconfig.d.ts"
  },
  "directories": {
    "test": "tests"
  },
  "scripts": {
    "test": "node ./node_modules/mocha/bin/mocha dist/test/**/*.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/TypeStrong/tsconfig.git"
  },
  "keywords": [
    "TypeScript",
    "compiler"
  ],
  "author": {
    "name": "basaratali@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/TypeStrong/tsconfig/issues"
  },
  "homepage": "https://github.com/TypeStrong/tsconfig",
  "dependencies": {
    "js-yaml": "^3.2.3",
    "glob-expand": "0.0.2"
  },
  "devDependencies": {
    "grunt": "^0.4.5",
    "grunt-ts": "^1.12.1",
    "mocha": "^2.0.1",
    "chai": "^1.10.0",
    "typescript": "^1.3.0",
    "grunt-dts-bundle": "^0.2.0"
  },
  "readme": "# tsconfig\r\n[![Build Status](https://secure.travis-ci.org/TypeStrong/tsconfig.svg?branch=master)](http://travis-ci.org/TypeStrong/tsconfig)\r\n\r\nBased on [this spec](https://github.com/Microsoft/TypeScript/issues/1667) and [this implementation](https://github.com/Microsoft/TypeScript/pull/1692)\r\n\r\nA specification for a file format + parser Implementation for specifying TypeScript projects\r\n\r\n# Specification\r\n## Configuration file format\r\nSpecify the project configuration in a `tsconfig.json` file in the root of your project. The structure will be specified using the interface `TypeScriptProjectSpecification`: \r\n\r\n```ts\r\ninterface CompilerOptions {\r\n    target?: string;            // 'es3'|'es5' (default) | 'es6'\r\n    module?: string;            // 'amd'|'commonjs' (default)\r\n\r\n    declaration?: boolean;      // Generates corresponding `.d.ts` file\r\n    out?: string;               // Concatenate and emit a single file\r\n    outDir?: string;            // Redirect output structure to this directory\r\n\r\n    noImplicitAny?: boolean;    // Error on inferred `any` type\r\n    removeComments?: boolean;   // Do not emit comments in output\r\n\r\n    sourceMap?: boolean;        // Generates SourceMaps (.map files)\r\n    sourceRoot?: string;        // Optionally specifies the location where debugger should locate TypeScript source files after deployment\r\n    mapRoot?: string;           // Optionally Specifies the location where debugger should locate map files after deployment\r\n}\r\n\r\n\r\n// Main configuration\r\ninterface TypeScriptProjectSpecification {    \r\n    compilerOptions: CompilerOptions;\r\n    files?: string[];            // optional: paths to files\r\n    filesGlob?: string[];       // optional: An array of 'glob / minimatch / RegExp' patterns to specify source files  \r\n}\r\n```\r\n*Note:* `filesGlob` can be fairly dynamic. See [node-glob](https://github.com/isaacs/node-glob) and [minimatch](https://github.com/isaacs/minimatch) (similar to `grunt`) for all the configuration options. If you call any of the API in this project that reads a `tsconfig.json` file, the `files-glob` is auto expanded (on disk) into `files` before returning.  \r\n\r\nPlease see the valid projects folder : https://github.com/TypeStrong/tsconfig/tree/master/testprojects/valid\r\n\r\n## Public API\r\nSee [`tsconfig.d.ts`](https://github.com/TypeStrong/tsconfig/blob/master/dist/lib/tsconfig.d.ts). API exists for querying the projects file, querying the projects relevant for single TypeScript file and creating a new projects file.\r\n\r\n# Contributing\r\nPlease open issues for discussion.\r\n",
  "readmeFilename": "README.md",
  "_id": "tsconfig@0.0.2",
  "dist": {
    "shasum": "c13d8b832622485e5153187ab6b899b98915fa93"
  },
  "_from": "tsconfig@0.0.2",
  "_resolved": "https://registry.npmjs.org/tsconfig/-/tsconfig-0.0.2.tgz"
}
