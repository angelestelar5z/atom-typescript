{
  "name": "tsproj",
  "version": "0.0.2",
  "description": "TypeScript project file specification + implementation",
  "main": "dist/lib/index.js",
  "typescript": {
    "definition": "dist/lib/tsproj.d.ts"
  },
  "directories": {
    "test": "tests"
  },
  "scripts": {
    "test": "node ./node_modules/mocha/bin/mocha dist/test/**/*.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/TypeStrong/tsproj.git"
  },
  "keywords": [
    "TypeScript",
    "compiler"
  ],
  "author": {
    "name": "basaratali@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/TypeStrong/tsproj/issues"
  },
  "homepage": "https://github.com/TypeStrong/tsproj",
  "dependencies": {
    "js-yaml": "^3.2.3",
    "glob-expand": "0.0.2"
  },
  "devDependencies": {
    "grunt": "^0.4.5",
    "grunt-ts": "^1.12.1",
    "mocha": "^2.0.1",
    "chai": "^1.10.0",
    "typescript": "^1.3.0",
    "grunt-dts-bundle": "^0.2.0"
  },
  "readme": "# tsproj\r\n[![Build Status](https://secure.travis-ci.org/TypeStrong/tsproj.svg?branch=master)](http://travis-ci.org/TypeStrong/tsproj)\r\n\r\nA specification for a file format + Parser Implementation for specifying TypeScript projects\r\n\r\n# Specification\r\n## Configuration file format\r\nSpecify the project configuration in a `tsproj.yml` file in the root of your project. The structure will be specified using the interface `TypeScriptProjectRootSpecification`: \r\n\r\n```ts\r\ninterface TypeScriptProjectSpecification {\r\n    sources?: string[];         // An array of 'minimatch` patterns to specify source files  \r\n    target?: string;            // 'es3'|'es5'\r\n    module?: string;            // 'amd'|'commonjs'\r\n\r\n    declaration?: boolean;      // Generates corresponding `.d.ts` file\r\n    out?: string;               // Concatenate and emit a single file\r\n    outDir?: string;            // Redirect output structure to this directory\r\n\r\n    noImplicitAny?: boolean;    // Error on inferred `any` type\r\n    removeComments?: boolean;   // Do not emit comments in output\r\n\r\n    sourceMap?: boolean;        // Generates SourceMaps (.map files)\r\n    sourceRoot?: string;        // Optionally specifies the location where debugger should locate TypeScript source files after deployment\r\n    mapRoot?: string;           // Optionally Specifies the location where debugger should locate map files after deployment\r\n}\r\n\r\n// Main configuration\r\ninterface TypeScriptProjectsRootSpecification extends TypeScriptProjectSpecification {\r\n    defaults?: TypeScriptProjectSpecification;\r\n    projects: {\r\n        [projectName: string]: TypeScriptProjectSpecification;\r\n    }\r\n}\r\n```\r\n*Note:* all strings are case insensitive.<br>\r\n*Note:* `defaults` are not required and should not participate in compilation.<br> \r\n*Note:* If you don't have `projects` then your configuration is invalid.<br>\r\n*Note:* any `default` property can be overridden by individual projects.<br>\r\n\r\nPlease see the valid projects folder : https://github.com/TypeStrong/tsproj/tree/master/testprojects/valid\r\n\r\n## Public API\r\nSee `tsproj.d.ts`. API exists for querying the projects file, querying the projects relevant for single TypeScript file and creating a new projects file.\r\n\r\n# Contributing\r\nPlease open issues for discussion.\r\n\r\n# Misc\r\n## Inspirations \r\nhttps://github.com/fdecampredon/brackets-typescript and `grunt` configurations. \r\n\r\nDifferences: removed the confusion around \"target vs. task\" options in grunt (here all options are overridable) and root sources in brackets-ts (here defaults are called `defaults`, do not participate in compilation and serve only to seed properties including sources to various projects). \r\n## Why YAML\r\nSo that you can comment your project file for the next dev. \r\n",
  "readmeFilename": "README.md",
  "_id": "tsproj@0.0.2",
  "dist": {
    "shasum": "e954ef468cea6402781e613044cc99edc8536df4"
  },
  "_from": "tsproj@0.0.2",
  "_resolved": "https://registry.npmjs.org/tsproj/-/tsproj-0.0.2.tgz"
}
